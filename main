#!/bin/bash
VERSION="0.1"
ROOT="$(dirname "$0")"
SELF="$(basename "$0")"


CONFIG_FILE_PATH=".dtow"
IGNORE_FILE_PATH=".dtowignore"

DEFAULT_CONFIG="root=/
home=$HOME/
.=$HOME/"

function info() {
  version
  echo -e "$SELF is a dotfile managment script inspired by GNU Stow, with added support for symlinking to root directories like /etc or /bin"
  echo -e "$SELF is a (mostly) drop-in replacement of GNU Stow"
  echo
}

function version() {
  echo -e "$SELF version $VERSION"
}

function usage() {
  echo -e "USAGE:\n\n\t$SELF [OPTION ...] [-D|-S|-R] PACKAGE ... [-D|-S|-R] PACKAGE ...\n"
}

function options() {
  echo -e "OPTIONS\n"
  echo -e "\t-d DIR, --dir=DIR\tSet stow dir to DIR (default is current dir)"
  echo -e "\t-t DIR, --target=DIR\tOverride default target to DIR\n\t\t\t\t(configured in the $CONFIG_FILE_PATH file\n\t\t\t\tdefault is \$HOME)"
  echo
  echo -e "\t-S, --stow\t\tStow the package names that follow this option"
  echo -e "\t-D, --delete\t\tUnstow the package names that follow this option"
  echo -e "\t-R, --restow\t\tRestow (like $SELF -D followed by $0 -S)"
  echo
  echo -e "\t--ignore=REGEX\t\tIgnore files ending in this Perl regex"
  echo -e "\t--defer=REGEX\t\tDon't stow files beginning with this Perl regex\n\t\t\t\tif the file is already stowed to another package"
  echo -e "\t--override=REGEX\tForce stowing files beginning with this Perl regex\n\t\t\t\tif the file is already stowed to another package"
  echo -e "\t--adopt\t\t\t(Use with care!) Import existing files into stow\n\t\t\t\tfrom target. Please read docs before using."
  echo -e "\t--dotfiles\t\tEnables special handling for dotfiles that are\n\t\t\t\tStow packages that start with \"dot-\" and not \".\""
  echo -e "\t-p, --compat\t\tUse legacy algorithm for unstowing"
  echo -e "\t-n, --no, --simulate\tDo not actually make any filesystem changes"
  echo -e "\t-v, --verbose[=N]\tIncrease verbosity (levels are from 0 to 5;\n\t\t\t\t -v or --verbose adds 1; --verbose=N sets level)"
  echo
  echo -e "\t-V, --version\t\tShow $SELF version number"
  echo -e "\t-h, --help\t\tShow this help"
}

function help() {
  info
  usage
  options
}

IGNORE_REGEX=""

function parse_ignore() {
  if [[ -z "$IGNORE_REGEX" ]]; then
    ignore_patterns=()
    while IFS= read -r line || [ -n "$line" ]; do
      # Skip comments and empty lines
      [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue

      # Convert glob pattern to regex
      pattern=$(echo "$line" | sed 's/\./\\./g; s/\*/.*/g; s/\//\\\//g')
      ignore_patterns+=("$pattern")
    done < "$IGNORE_FILE"

    # Build a grep -Ev pattern
    if [ ${#ignore_patterns[@]} -gt 0 ]; then
      IGNORE_REGEX=$(printf "|%s" "${ignore_patterns[@]}")
      IGNORE_REGEX="${IGNORE_REGEX:1}"  # Remove leading |
    else
      IGNORE_REGEX="^$"  # Match nothing if no patterns
    fi
  fi

  if [[ "$1" =~ "$IGNORE_REGEX" ]]; then
    return 1
  else
    return 0
  fi
}

function parse_config() {
  default_value=""

  config=""
  if [ -f "$1/$CONFIG_FILE_PATH" ]; then
    config="$(cat "$1/$CONFIG_FILE_PATH")"
  else
    config="$DEFAULT_CONFIG"
  fi

  while IFS= read -r line
  do
    # Trim leading/trailing whitespace using Bash parameter expansion
    line="${line#"${line%%[![:space:]]*}"}"
    line="${line%"${line##*[![:space:]]}"}"

    # Skip empty lines and comments
    [[ -z "$line" || "${line:0:1}" == "#" ]] && continue

    # Split on first '=' only
    IFS='=' read -r key value <<< "$line"

    # Trim spaces around key and value
    key="${key#"${key%%[![:space:]]*}"}"
    key="${key%"${key##*[![:space:]]}"}"
    value="${value#"${value%%[![:space:]]*}"}"
    value="${value%"${value##*[![:space:]]}"}"

    if [[ "$key" == "." ]]; then
      if [[ -z "$TARGET" ]]; then
        default_value="$value"
      else
        default_value="$TARGET"
      fi
    elif [[ "$2" == "$key" ]]; then
      echo "$(echo $value | envsubst)"
      return 0
    fi
  done <<< "$config"

  echo "$(echo "$default_value" | envsubst)/$2"
}

function try_sudo() {
  local VERBOSE="$3"
  result="$($1 2>&1)"
  status=$?

  if [[ $status -eq 1 ]]; then
    if [[ "$result" == *"Permission denied"* ]]; then
      sudo -E $1
      if [[ $? -eq 0 ]]; then
        if [ "$VERBOSE" -ge 1 ]; then
          if [[ -n "$2" ]]; then
            echo "$2"
          fi
        fi
      fi
    fi
  else
    if [ "$VERBOSE" -ge 1 ]; then
      if [[ -n "$2" ]]; then
        echo "$2"
      fi
    fi
  fi
}

function unsymlink_directory() {
  local SOURCE="$1"
  local TARGET="$2"
  local IGNORE="$3"
  local DEFER="$4"
  local OVERRIDE="$5"
  local ADOPT="$6"
  local DOTFILES="$7"
  local COMPAT="$8"
  local SIMULATE="$9"
  local VERBOSE="${10}"

  if [[ ! -d "$TARGET" ]]; then
    return 1
  fi

  find "$SOURCE" -type f -o -type l | while read -r source_path; do
    # Get relative path from the stow package dir
    rel_path="${source_path#$SOURCE/}"
    # Compute the corresponding target path
    target_path="$TARGET/$rel_path"

    # If it's a symlink and it points to this package, remove it
    if [[ -L "$target_path" ]]; then
      resolved_target=$(readlink -f "$(readlink "$target_path")")
      resolved_source=$(readlink -f "$source_path" 2>/dev/null)

      # Symlink still points to the expected source in package?
      if [[ "$resolved_target" == "$resolved_source" ]]; then
        if [ "$SIMULATE" == "0" ]; then
          try_sudo "rm "$target_path"" "UNLINK: $target_path" "$VERBOSE"
        fi
      fi
    fi
  done

  # Only remove if empty and part of this package
  find "$SOURCE" -type d | sort -r | while read -r src_dir; do
    rel_dir="${src_dir#$SOURCE/}"
    target_subdir="$TARGET/$rel_dir"
    if [[ -d "$target_subdir" ]] && [[ -z "$(ls -A "$target_subdir")" ]]; then
      if [ "$VERBOSE" -ge 2 ]; then
        echo "Removing empty directory: $target_subdir"
      fi
      
      if [ "$SIMULATE" == "0" ]; then
        try_sudo "rmdir "$target_subdir"" "" "$VERBOSE"
      fi
    fi
  done
}


function symlink_directory() {
  local SOURCE="$1"
  local TARGET="$2"
  local IGNORE="$3"
  local DEFER="$4"
  local OVERRIDE="$5"
  local ADOPT="$6"
  local DOTFILES="$7"
  local COMPAT="$8"
  local SIMULATE="$9"
  local VERBOSE="${10}"

  if [[ ! -d "$TARGET" ]]; then
    return 1
  fi

  find "$SOURCE" -type f -o -type l | while read -r source_path; do
    # Get relative path from the stow package dir
    rel_path="${source_path#$SOURCE/}"
    # Compute the corresponding target path
    target_path="$TARGET/$rel_path"
    
    if [ "$VERBOSE" -ge 2 ]; then
      echo "Creating intermediate directories: $(dirname "$target_path")"
    fi

    if [ "$VERBOSE" -ge 1 ]; then
      echo "LINK: $source_path => $target_path"
    fi

    if [ "$SIMULATE" == "0" ]; then
      try_sudo "mkdir -p "$(dirname "$target_path")"" "" "$VERBOSE"
    
      try_sudo "ln -s "$source_path" "$target_path"" "" "$VERBOSE"
    fi
  done
}

function unstow() {
  local PACKAGE="$1"
  local DIR="$2"
  local TARGET="$3"
  local IGNORE="$4"
  local DEFER="$5"
  local OVERRIDE="$6"
  local ADOPT="$7"
  local DOTFILES="$8"
  local COMPAT="$9"
  local SIMULATE="${10}"
  local VERBOSE="${11}"
  if [ "$VERBOSE" -ge 2 ]; then
    echo "stow dir is $DIR"
    echo "Planning unstow of: $PACKAGE ..."
  fi

  if [ -d "$DIR/$PACKAGE" ]; then
    for directory in $(ls -a $DIR/$PACKAGE/)
    do
      if [[ "$directory" == "." || "$directory" == ".." ]]; then
        continue
      fi

      directory="$DIR/$PACKAGE/$directory"
      targ="$(parse_config $DIR $(basename "$directory") "$TARGET")"

      unsymlink_directory "$directory" "$targ" "$IGNORE" "$DEFER" "$OVERRIDE" "$ADOPT" "$DOTFILES" "$COMPAT" "$SIMULATE" "$VERBOSE"


      #ln -s "$directory" "$targ"
      
    done
  else
    echo "$SELF: ERROR: The stow directory $DIR does not contain package $PACKAGE"
    return 1
  fi
}

function stow() {
  local PACKAGE="$1"
  local DIR="$2"
  local TARGET="$3"
  local IGNORE="$4"
  local DEFER="$5"
  local OVERRIDE="$6"
  local ADOPT="$7"
  local DOTFILES="$8"
  local COMPAT="$9"
  local SIMULATE="${10}"
  local VERBOSE="${11}"

  if [ "$VERBOSE" -ge 2 ]; then
    echo "stow dir is $DIR"
    echo "Planning stow of: $PACKAGE ..."
  fi

  if [ -d "$DIR/$PACKAGE" ]; then
    for directory in $(ls -a $DIR/$PACKAGE/)
    do
      if [[ "$directory" == "." || "$directory" == ".." ]]; then
        continue
      fi

      directory="$DIR/$PACKAGE/$directory"
      #mkdir -p "$(realpath "$TARGET")/$(basename "$directory")"
      targ="$(parse_config $DIR $(basename "$directory") "$TARGET")"

      mkdir -p "$targ" &>/dev/null
      symlink_directory "$directory" "$targ" "$IGNORE" "$DEFER" "$OVERRIDE" "$ADOPT" "$DOTFILES" "$COMPAT" "$SIMULATE" "$VERBOSE"


      #ln -s "$directory" "$targ"
      
    done
  else
    echo "$SELF: ERROR: The stow directory $DIR does not contain package $PACKAGE"
    return 1
  fi
}

function restow {
  local DIR="$2"
  local TARGET="$3"
  local IGNORE="$4"
  local DEFER="$5"
  local OVERRIDE="$6"
  local ADOPT="$7"
  local DOTFILES="$8"
  local COMPAT="$9"
  local SIMULATE="${10}"
  local VERBOSE="${11}"


  unstow "$1" "$DIR" "$TARGET" "$IGNORE" "$DEFER" "$OVERRIDE" "$ADOPT" "$DOTFILES" "$COMPAT" "$SIMULATE" "$VERBOSE"

  stow "$1" "$DIR" "$TARGET" "$IGNORE" "$DEFER" "$OVERRIDE" "$ADOPT" "$DOTFILES" "$COMPAT" "$SIMULATE" "$VERBOSE"
}



# Main logic
DIR="./"
TARGET=""
IGNORE=""
DEFER=""
OVERRIDE=""
ADOPT=0
DOTFILES=0
COMPAT=0
SIMULATE=0
VERBOSE=0

while [[ "$1" == -* ]]; do
  case "$1" in
  -d)
    shift
    DIR="$1"
    ;;
  --dir=*)
    DIR="${1#*=}"
    ;;
  -t)
    shift
    TARGET="$1"
    ;;
  --target=*)
    TARGET="${1#*=}"
    ;;
  -S|--stow)
    shift
    stow "$1" "$DIR" "$TARGET" "$IGNORE" "$DEFER" "$OVERRIDE" "$ADOPT" "$DOTFILES" "$COMPAT" "$SIMULATE" "$VERBOSE"
    ;;
  -D|--delete)
    shift
    unstow "$1" "$DIR" "$TARGET" "$IGNORE" "$DEFER" "$OVERRIDE" "$ADOPT" "$DOTFILES" "$COMPAT" "$SIMULATE" "$VERBOSE"
    ;;
  -R|--restow)
    shift
    restow "$1" "$DIR" "$TARGET" "$IGNORE" "$DEFER" "$OVERRIDE" "$ADOPT" "$DOTFILES" "$COMPAT" "$SIMULATE" "$VERBOSE"
    ;;
  --ignore=*)
    IGNORE="${1#*=}"
    ;;
  --defer=*)
    DEFER="${1#*=}"
    ;;
  --override)
    OVERRIDE="${1#*=}"
    ;;
  --adopt)
    ADOPT=1
    ;;
  --dotfiles)
    DOTFILES=1
    ;;
  -p|--compat)
    COMPAT=1
    ;;
  -n|--no|--simulate)
    SIMULATE=1
    ;;
  -v*)
    (( VERBOSE += ${#1} - 1 ))
    ;;
  --verbose=*)
    VERBOSE="${1#*=}"
    ;;
  -h|--help)
    help
    exit 0
    ;;
  -V|--version)
    version
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

if [ ! -z "$1" ]; then
  stow "$1" "$DIR" "$TARGET" "$IGNORE" "$DEFER" "$OVERRIDE" "$ADOPT" "$DOTFILES" "$COMPAT" "$SIMULATE" "$VERBOSE"
fi


